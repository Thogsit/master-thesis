// <auto-generated>
//     This file was generated by SealedFga. Do not edit it directly.
// </auto-generated>
#nullable enable

using System;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SealedFga.Util;
using System.ComponentModel;
using System.Text.Json.Serialization;

namespace SealedFga.Sample.Secret;


[TypeConverter(typeof(IdTypeConverter))]
[JsonConverter(typeof(IdJsonConverter))]
public partial class SecretEntityId : IOpenFgaTypeId<SecretEntityId>, IEquatable<SecretEntityId>
{
    /// <summary>
    ///     The ID's value.
    /// </summary>
    public Guid Value { get; set; }

    /// <summary>
    ///     Creates a new instance of SecretEntityId from the ID's "raw" type.
    /// </summary>
    /// <param name="val">The raw ID's value.</param>
    public SecretEntityId(Guid val)
    {
        Value = val;
    }

    /// <inheritdoc />
    public static string OpenFgaTypeName => "secret";

    public static SecretEntityId New()
    {
        return new SecretEntityId(Guid.NewGuid());
    }

    /// <inheritdoc />
    public static SecretEntityId Parse(string val)
    {
        return new SecretEntityId(Guid.Parse(val));
    }

    /// <inheritdoc />
    public override string ToString()
    {
        return Value.ToString();
    }

    /// <inheritdoc />
    public override bool Equals(object? obj)
    {
        if (ReferenceEquals(null, obj)) return false;
        if (ReferenceEquals(this, obj)) return true;
        if (obj.GetType() != this.GetType()) return false;
        return Equals((SecretEntityId) obj);
    }

    /// <inheritdoc />
    public bool Equals(SecretEntityId? other)
    {
        if (ReferenceEquals(null, other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return Value.Equals(other.Value);
    }

    /// <inheritdoc />
    public override int GetHashCode()
    {
        return Value.GetHashCode();
    }

    public static bool operator ==(SecretEntityId? left, SecretEntityId? right)
    {
        if (ReferenceEquals(left, null))
        {
            return ReferenceEquals(right, null);
        }

        return left.Equals(right);
    }

    public static bool operator !=(SecretEntityId? left, SecretEntityId? right)
    {
        return !(left == right);
    }


    /// <summary>
    ///     Converts a <see cref="SecretEntityId" /> to a <see cref="Guid" /> and vice versa for DB storage.
    /// </summary>
    public class EfCoreValueConverter() : ValueConverter<SecretEntityId, Guid>(
        id => id.Value,
        val => new SecretEntityId(val));

    /// <summary>
    ///    Converts a <see cref="SecretEntityId" /> to its JSON representation and vice versa.
    /// </summary>
    public class IdJsonConverter() : JsonSimpleStringConverter<SecretEntityId>(s => SecretEntityId.Parse(s));

    /// <summary>
    ///    Converts a <see cref="SecretEntityId" /> to another compatible type and vice versa.
    /// </summary>
    public class IdTypeConverter() : GuidIdTypeConverter<SecretEntityId>(g => new SecretEntityId(g), s => SecretEntityId.Parse(s));
}