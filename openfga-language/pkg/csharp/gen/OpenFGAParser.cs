//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from OpenFGAParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class OpenFGAParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COLON=1, COMMA=2, LESS=3, GREATER=4, LBRACKET=5, RBRACKET=6, LPAREN=7, 
		RPAREN=8, WHITESPACE=9, IDENTIFIER=10, HASH=11, AND=12, OR=13, BUT_NOT=14, 
		FROM=15, MODULE=16, MODEL=17, SCHEMA=18, SCHEMA_VERSION=19, EXTEND=20, 
		TYPE=21, CONDITION=22, RELATIONS=23, RELATION=24, DEFINE=25, KEYWORD_WITH=26, 
		EQUALS=27, NOT_EQUALS=28, IN=29, LESS_EQUALS=30, GREATER_EQUALS=31, LOGICAL_AND=32, 
		LOGICAL_OR=33, RPRACKET=34, LBRACE=35, RBRACE=36, DOT=37, MINUS=38, EXCLAM=39, 
		QUESTIONMARK=40, PLUS=41, STAR=42, SLASH=43, PERCENT=44, CEL_TRUE=45, 
		CEL_FALSE=46, NUL=47, CEL_COMMENT=48, NUM_FLOAT=49, NUM_INT=50, NUM_UINT=51, 
		STRING=52, BYTES=53, EXTENDED_IDENTIFIER=54, NEWLINE=55, CONDITION_PARAM_CONTAINER=56, 
		CONDITION_PARAM_TYPE=57;
	public const int
		RULE_main = 0, RULE_modelHeader = 1, RULE_moduleHeader = 2, RULE_typeDefs = 3, 
		RULE_typeDef = 4, RULE_relationDeclaration = 5, RULE_relationName = 6, 
		RULE_relationDef = 7, RULE_relationDefNoDirect = 8, RULE_relationDefPartials = 9, 
		RULE_relationDefGrouping = 10, RULE_relationRecurse = 11, RULE_relationRecurseNoDirect = 12, 
		RULE_relationDefDirectAssignment = 13, RULE_relationDefRewrite = 14, RULE_relationDefTypeRestriction = 15, 
		RULE_relationDefTypeRestrictionBase = 16, RULE_conditions = 17, RULE_condition = 18, 
		RULE_conditionName = 19, RULE_conditionParameter = 20, RULE_parameterName = 21, 
		RULE_parameterType = 22, RULE_multiLineComment = 23, RULE_identifier = 24, 
		RULE_extended_identifier = 25, RULE_conditionExpression = 26;
	public static readonly string[] ruleNames = {
		"main", "modelHeader", "moduleHeader", "typeDefs", "typeDef", "relationDeclaration", 
		"relationName", "relationDef", "relationDefNoDirect", "relationDefPartials", 
		"relationDefGrouping", "relationRecurse", "relationRecurseNoDirect", "relationDefDirectAssignment", 
		"relationDefRewrite", "relationDefTypeRestriction", "relationDefTypeRestrictionBase", 
		"conditions", "condition", "conditionName", "conditionParameter", "parameterName", 
		"parameterType", "multiLineComment", "identifier", "extended_identifier", 
		"conditionExpression"
	};

	private static readonly string[] _LiteralNames = {
		null, "':'", "','", "'<'", "'>'", "'['", null, "'('", "')'", null, null, 
		"'#'", "'and'", "'or'", "'but not'", "'from'", "'module'", "'model'", 
		"'schema'", null, "'extend'", "'type'", "'condition'", "'relations'", 
		"'relation'", "'define'", "'with'", "'=='", "'!='", "'in'", "'<='", "'>='", 
		"'&&'", "'||'", "']'", "'{'", "'}'", "'.'", "'-'", "'!'", "'?'", "'+'", 
		"'*'", "'/'", "'%'", "'true'", "'false'", "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COLON", "COMMA", "LESS", "GREATER", "LBRACKET", "RBRACKET", "LPAREN", 
		"RPAREN", "WHITESPACE", "IDENTIFIER", "HASH", "AND", "OR", "BUT_NOT", 
		"FROM", "MODULE", "MODEL", "SCHEMA", "SCHEMA_VERSION", "EXTEND", "TYPE", 
		"CONDITION", "RELATIONS", "RELATION", "DEFINE", "KEYWORD_WITH", "EQUALS", 
		"NOT_EQUALS", "IN", "LESS_EQUALS", "GREATER_EQUALS", "LOGICAL_AND", "LOGICAL_OR", 
		"RPRACKET", "LBRACE", "RBRACE", "DOT", "MINUS", "EXCLAM", "QUESTIONMARK", 
		"PLUS", "STAR", "SLASH", "PERCENT", "CEL_TRUE", "CEL_FALSE", "NUL", "CEL_COMMENT", 
		"NUM_FLOAT", "NUM_INT", "NUM_UINT", "STRING", "BYTES", "EXTENDED_IDENTIFIER", 
		"NEWLINE", "CONDITION_PARAM_CONTAINER", "CONDITION_PARAM_TYPE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "OpenFGAParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static OpenFGAParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public OpenFGAParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public OpenFGAParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefsContext typeDefs() {
			return GetRuleContext<TypeDefsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionsContext conditions() {
			return GetRuleContext<ConditionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(OpenFGAParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModelHeaderContext modelHeader() {
			return GetRuleContext<ModelHeaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleHeaderContext moduleHeader() {
			return GetRuleContext<ModuleHeaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE() { return GetToken(OpenFGAParser.WHITESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(OpenFGAParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(OpenFGAParser.NEWLINE, i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHITESPACE) {
				{
				State = 54;
				Match(WHITESPACE);
				}
			}

			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 57;
				Match(NEWLINE);
				}
			}

			State = 62;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 60;
				modelHeader();
				}
				break;
			case 2:
				{
				State = 61;
				moduleHeader();
				}
				break;
			}
			State = 65;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 64;
				Match(NEWLINE);
				}
				break;
			}
			State = 67;
			typeDefs();
			State = 69;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 68;
				Match(NEWLINE);
				}
				break;
			}
			State = 71;
			conditions();
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 72;
				Match(NEWLINE);
				}
			}

			State = 75;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModelHeaderContext : ParserRuleContext {
		public IToken schemaVersion;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODEL() { return GetToken(OpenFGAParser.MODEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(OpenFGAParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(OpenFGAParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(OpenFGAParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHITESPACE() { return GetTokens(OpenFGAParser.WHITESPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE(int i) {
			return GetToken(OpenFGAParser.WHITESPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA_VERSION() { return GetToken(OpenFGAParser.SCHEMA_VERSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MultiLineCommentContext multiLineComment() {
			return GetRuleContext<MultiLineCommentContext>(0);
		}
		public ModelHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modelHeader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.EnterModelHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.ExitModelHeader(this);
		}
	}

	[RuleVersion(0)]
	public ModelHeaderContext modelHeader() {
		ModelHeaderContext _localctx = new ModelHeaderContext(Context, State);
		EnterRule(_localctx, 2, RULE_modelHeader);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HASH) {
				{
				State = 77;
				multiLineComment();
				State = 78;
				Match(NEWLINE);
				}
			}

			State = 82;
			Match(MODEL);
			State = 83;
			Match(NEWLINE);
			State = 84;
			Match(SCHEMA);
			State = 85;
			Match(WHITESPACE);
			State = 86;
			_localctx.schemaVersion = Match(SCHEMA_VERSION);
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHITESPACE) {
				{
				State = 87;
				Match(WHITESPACE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleHeaderContext : ParserRuleContext {
		public IdentifierContext moduleName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(OpenFGAParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHITESPACE() { return GetTokens(OpenFGAParser.WHITESPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE(int i) {
			return GetToken(OpenFGAParser.WHITESPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiLineCommentContext multiLineComment() {
			return GetRuleContext<MultiLineCommentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(OpenFGAParser.NEWLINE, 0); }
		public ModuleHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleHeader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.EnterModuleHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.ExitModuleHeader(this);
		}
	}

	[RuleVersion(0)]
	public ModuleHeaderContext moduleHeader() {
		ModuleHeaderContext _localctx = new ModuleHeaderContext(Context, State);
		EnterRule(_localctx, 4, RULE_moduleHeader);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HASH) {
				{
				State = 90;
				multiLineComment();
				State = 91;
				Match(NEWLINE);
				}
			}

			State = 95;
			Match(MODULE);
			State = 96;
			Match(WHITESPACE);
			State = 97;
			_localctx.moduleName = identifier();
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHITESPACE) {
				{
				State = 98;
				Match(WHITESPACE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefContext[] typeDef() {
			return GetRuleContexts<TypeDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefContext typeDef(int i) {
			return GetRuleContext<TypeDefContext>(i);
		}
		public TypeDefsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDefs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.EnterTypeDefs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.ExitTypeDefs(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefsContext typeDefs() {
		TypeDefsContext _localctx = new TypeDefsContext(Context, State);
		EnterRule(_localctx, 6, RULE_typeDefs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 101;
					typeDef();
					}
					} 
				}
				State = 106;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefContext : ParserRuleContext {
		public Extended_identifierContext typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(OpenFGAParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(OpenFGAParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(OpenFGAParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHITESPACE() { return GetTokens(OpenFGAParser.WHITESPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE(int i) {
			return GetToken(OpenFGAParser.WHITESPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Extended_identifierContext extended_identifier() {
			return GetRuleContext<Extended_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiLineCommentContext multiLineComment() {
			return GetRuleContext<MultiLineCommentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTEND() { return GetToken(OpenFGAParser.EXTEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIONS() { return GetToken(OpenFGAParser.RELATIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelationDeclarationContext[] relationDeclaration() {
			return GetRuleContexts<RelationDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationDeclarationContext relationDeclaration(int i) {
			return GetRuleContext<RelationDeclarationContext>(i);
		}
		public TypeDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.EnterTypeDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.ExitTypeDef(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefContext typeDef() {
		TypeDefContext _localctx = new TypeDefContext(Context, State);
		EnterRule(_localctx, 8, RULE_typeDef);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 107;
				Match(NEWLINE);
				State = 108;
				multiLineComment();
				}
				break;
			}
			State = 111;
			Match(NEWLINE);
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTEND) {
				{
				State = 112;
				Match(EXTEND);
				State = 113;
				Match(WHITESPACE);
				}
			}

			State = 116;
			Match(TYPE);
			State = 117;
			Match(WHITESPACE);
			State = 118;
			_localctx.typeName = extended_identifier();
			State = 126;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 119;
				Match(NEWLINE);
				State = 120;
				Match(RELATIONS);
				State = 122;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 121;
						relationDeclaration();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 124;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(OpenFGAParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(OpenFGAParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINE() { return GetToken(OpenFGAParser.DEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHITESPACE() { return GetTokens(OpenFGAParser.WHITESPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE(int i) {
			return GetToken(OpenFGAParser.WHITESPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationNameContext relationName() {
			return GetRuleContext<RelationNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(OpenFGAParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelationDefContext relationDef() {
			return GetRuleContext<RelationDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiLineCommentContext multiLineComment() {
			return GetRuleContext<MultiLineCommentContext>(0);
		}
		public RelationDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.EnterRelationDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.ExitRelationDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public RelationDeclarationContext relationDeclaration() {
		RelationDeclarationContext _localctx = new RelationDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_relationDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 128;
				Match(NEWLINE);
				State = 129;
				multiLineComment();
				}
				break;
			}
			State = 132;
			Match(NEWLINE);
			State = 133;
			Match(DEFINE);
			State = 134;
			Match(WHITESPACE);
			State = 135;
			relationName();
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHITESPACE) {
				{
				State = 136;
				Match(WHITESPACE);
				}
			}

			State = 139;
			Match(COLON);
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHITESPACE) {
				{
				State = 140;
				Match(WHITESPACE);
				}
			}

			{
			State = 143;
			relationDef();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Extended_identifierContext extended_identifier() {
			return GetRuleContext<Extended_identifierContext>(0);
		}
		public RelationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.EnterRelationName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.ExitRelationName(this);
		}
	}

	[RuleVersion(0)]
	public RelationNameContext relationName() {
		RelationNameContext _localctx = new RelationNameContext(Context, State);
		EnterRule(_localctx, 12, RULE_relationName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			extended_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationDefDirectAssignmentContext relationDefDirectAssignment() {
			return GetRuleContext<RelationDefDirectAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationDefGroupingContext relationDefGrouping() {
			return GetRuleContext<RelationDefGroupingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationRecurseContext relationRecurse() {
			return GetRuleContext<RelationRecurseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationDefPartialsContext relationDefPartials() {
			return GetRuleContext<RelationDefPartialsContext>(0);
		}
		public RelationDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.EnterRelationDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.ExitRelationDef(this);
		}
	}

	[RuleVersion(0)]
	public RelationDefContext relationDef() {
		RelationDefContext _localctx = new RelationDefContext(Context, State);
		EnterRule(_localctx, 14, RULE_relationDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACKET:
				{
				State = 147;
				relationDefDirectAssignment();
				}
				break;
			case IDENTIFIER:
			case MODULE:
			case MODEL:
			case SCHEMA:
			case EXTEND:
			case TYPE:
			case RELATION:
			case EXTENDED_IDENTIFIER:
				{
				State = 148;
				relationDefGrouping();
				}
				break;
			case LPAREN:
				{
				State = 149;
				relationRecurse();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 153;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 152;
				relationDefPartials();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationDefNoDirectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationDefGroupingContext relationDefGrouping() {
			return GetRuleContext<RelationDefGroupingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationRecurseNoDirectContext relationRecurseNoDirect() {
			return GetRuleContext<RelationRecurseNoDirectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationDefPartialsContext relationDefPartials() {
			return GetRuleContext<RelationDefPartialsContext>(0);
		}
		public RelationDefNoDirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationDefNoDirect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.EnterRelationDefNoDirect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.ExitRelationDefNoDirect(this);
		}
	}

	[RuleVersion(0)]
	public RelationDefNoDirectContext relationDefNoDirect() {
		RelationDefNoDirectContext _localctx = new RelationDefNoDirectContext(Context, State);
		EnterRule(_localctx, 16, RULE_relationDefNoDirect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
			case MODULE:
			case MODEL:
			case SCHEMA:
			case EXTEND:
			case TYPE:
			case RELATION:
			case EXTENDED_IDENTIFIER:
				{
				State = 155;
				relationDefGrouping();
				}
				break;
			case LPAREN:
				{
				State = 156;
				relationRecurseNoDirect();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 160;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 159;
				relationDefPartials();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationDefPartialsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHITESPACE() { return GetTokens(OpenFGAParser.WHITESPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE(int i) {
			return GetToken(OpenFGAParser.WHITESPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(OpenFGAParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(OpenFGAParser.OR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationDefGroupingContext[] relationDefGrouping() {
			return GetRuleContexts<RelationDefGroupingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationDefGroupingContext relationDefGrouping(int i) {
			return GetRuleContext<RelationDefGroupingContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationRecurseNoDirectContext[] relationRecurseNoDirect() {
			return GetRuleContexts<RelationRecurseNoDirectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationRecurseNoDirectContext relationRecurseNoDirect(int i) {
			return GetRuleContext<RelationRecurseNoDirectContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(OpenFGAParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(OpenFGAParser.AND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUT_NOT() { return GetToken(OpenFGAParser.BUT_NOT, 0); }
		public RelationDefPartialsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationDefPartials; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.EnterRelationDefPartials(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.ExitRelationDefPartials(this);
		}
	}

	[RuleVersion(0)]
	public RelationDefPartialsContext relationDefPartials() {
		RelationDefPartialsContext _localctx = new RelationDefPartialsContext(Context, State);
		EnterRule(_localctx, 18, RULE_relationDefPartials);
		try {
			int _alt;
			State = 191;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 169;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 162;
						Match(WHITESPACE);
						State = 163;
						Match(OR);
						State = 164;
						Match(WHITESPACE);
						State = 167;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case IDENTIFIER:
						case MODULE:
						case MODEL:
						case SCHEMA:
						case EXTEND:
						case TYPE:
						case RELATION:
						case EXTENDED_IDENTIFIER:
							{
							State = 165;
							relationDefGrouping();
							}
							break;
						case LPAREN:
							{
							State = 166;
							relationRecurseNoDirect();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 171;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 180;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 173;
						Match(WHITESPACE);
						State = 174;
						Match(AND);
						State = 175;
						Match(WHITESPACE);
						State = 178;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case IDENTIFIER:
						case MODULE:
						case MODEL:
						case SCHEMA:
						case EXTEND:
						case TYPE:
						case RELATION:
						case EXTENDED_IDENTIFIER:
							{
							State = 176;
							relationDefGrouping();
							}
							break;
						case LPAREN:
							{
							State = 177;
							relationRecurseNoDirect();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 182;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 184;
				Match(WHITESPACE);
				State = 185;
				Match(BUT_NOT);
				State = 186;
				Match(WHITESPACE);
				State = 189;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IDENTIFIER:
				case MODULE:
				case MODEL:
				case SCHEMA:
				case EXTEND:
				case TYPE:
				case RELATION:
				case EXTENDED_IDENTIFIER:
					{
					State = 187;
					relationDefGrouping();
					}
					break;
				case LPAREN:
					{
					State = 188;
					relationRecurseNoDirect();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationDefGroupingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationDefRewriteContext relationDefRewrite() {
			return GetRuleContext<RelationDefRewriteContext>(0);
		}
		public RelationDefGroupingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationDefGrouping; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.EnterRelationDefGrouping(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.ExitRelationDefGrouping(this);
		}
	}

	[RuleVersion(0)]
	public RelationDefGroupingContext relationDefGrouping() {
		RelationDefGroupingContext _localctx = new RelationDefGroupingContext(Context, State);
		EnterRule(_localctx, 20, RULE_relationDefGrouping);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			relationDefRewrite();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationRecurseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(OpenFGAParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(OpenFGAParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelationDefContext relationDef() {
			return GetRuleContext<RelationDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationRecurseNoDirectContext relationRecurseNoDirect() {
			return GetRuleContext<RelationRecurseNoDirectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHITESPACE() { return GetTokens(OpenFGAParser.WHITESPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE(int i) {
			return GetToken(OpenFGAParser.WHITESPACE, i);
		}
		public RelationRecurseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationRecurse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.EnterRelationRecurse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.ExitRelationRecurse(this);
		}
	}

	[RuleVersion(0)]
	public RelationRecurseContext relationRecurse() {
		RelationRecurseContext _localctx = new RelationRecurseContext(Context, State);
		EnterRule(_localctx, 22, RULE_relationRecurse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			Match(LPAREN);
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WHITESPACE) {
				{
				{
				State = 196;
				Match(WHITESPACE);
				}
				}
				State = 201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 204;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 202;
				relationDef();
				}
				break;
			case 2:
				{
				State = 203;
				relationRecurseNoDirect();
				}
				break;
			}
			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WHITESPACE) {
				{
				{
				State = 206;
				Match(WHITESPACE);
				}
				}
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 212;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationRecurseNoDirectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(OpenFGAParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(OpenFGAParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelationDefNoDirectContext relationDefNoDirect() {
			return GetRuleContext<RelationDefNoDirectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationRecurseNoDirectContext relationRecurseNoDirect() {
			return GetRuleContext<RelationRecurseNoDirectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHITESPACE() { return GetTokens(OpenFGAParser.WHITESPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE(int i) {
			return GetToken(OpenFGAParser.WHITESPACE, i);
		}
		public RelationRecurseNoDirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationRecurseNoDirect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.EnterRelationRecurseNoDirect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.ExitRelationRecurseNoDirect(this);
		}
	}

	[RuleVersion(0)]
	public RelationRecurseNoDirectContext relationRecurseNoDirect() {
		RelationRecurseNoDirectContext _localctx = new RelationRecurseNoDirectContext(Context, State);
		EnterRule(_localctx, 24, RULE_relationRecurseNoDirect);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			Match(LPAREN);
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WHITESPACE) {
				{
				{
				State = 215;
				Match(WHITESPACE);
				}
				}
				State = 220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 221;
				relationDefNoDirect();
				}
				break;
			case 2:
				{
				State = 222;
				relationRecurseNoDirect();
				}
				break;
			}
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WHITESPACE) {
				{
				{
				State = 225;
				Match(WHITESPACE);
				}
				}
				State = 230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 231;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationDefDirectAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(OpenFGAParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelationDefTypeRestrictionContext[] relationDefTypeRestriction() {
			return GetRuleContexts<RelationDefTypeRestrictionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationDefTypeRestrictionContext relationDefTypeRestriction(int i) {
			return GetRuleContext<RelationDefTypeRestrictionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPRACKET() { return GetToken(OpenFGAParser.RPRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHITESPACE() { return GetTokens(OpenFGAParser.WHITESPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE(int i) {
			return GetToken(OpenFGAParser.WHITESPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(OpenFGAParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(OpenFGAParser.COMMA, i);
		}
		public RelationDefDirectAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationDefDirectAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.EnterRelationDefDirectAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.ExitRelationDefDirectAssignment(this);
		}
	}

	[RuleVersion(0)]
	public RelationDefDirectAssignmentContext relationDefDirectAssignment() {
		RelationDefDirectAssignmentContext _localctx = new RelationDefDirectAssignmentContext(Context, State);
		EnterRule(_localctx, 26, RULE_relationDefDirectAssignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			Match(LBRACKET);
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHITESPACE) {
				{
				State = 234;
				Match(WHITESPACE);
				}
			}

			State = 237;
			relationDefTypeRestriction();
			State = 239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHITESPACE) {
				{
				State = 238;
				Match(WHITESPACE);
				}
			}

			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 241;
				Match(COMMA);
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHITESPACE) {
					{
					State = 242;
					Match(WHITESPACE);
					}
				}

				State = 245;
				relationDefTypeRestriction();
				State = 247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHITESPACE) {
					{
					State = 246;
					Match(WHITESPACE);
					}
				}

				}
				}
				State = 253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 254;
			Match(RPRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationDefRewriteContext : ParserRuleContext {
		public Extended_identifierContext rewriteComputedusersetName;
		public Extended_identifierContext rewriteTuplesetName;
		[System.Diagnostics.DebuggerNonUserCode] public Extended_identifierContext[] extended_identifier() {
			return GetRuleContexts<Extended_identifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Extended_identifierContext extended_identifier(int i) {
			return GetRuleContext<Extended_identifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHITESPACE() { return GetTokens(OpenFGAParser.WHITESPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE(int i) {
			return GetToken(OpenFGAParser.WHITESPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(OpenFGAParser.FROM, 0); }
		public RelationDefRewriteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationDefRewrite; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.EnterRelationDefRewrite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.ExitRelationDefRewrite(this);
		}
	}

	[RuleVersion(0)]
	public RelationDefRewriteContext relationDefRewrite() {
		RelationDefRewriteContext _localctx = new RelationDefRewriteContext(Context, State);
		EnterRule(_localctx, 28, RULE_relationDefRewrite);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			_localctx.rewriteComputedusersetName = extended_identifier();
			State = 261;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 257;
				Match(WHITESPACE);
				State = 258;
				Match(FROM);
				State = 259;
				Match(WHITESPACE);
				State = 260;
				_localctx.rewriteTuplesetName = extended_identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationDefTypeRestrictionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationDefTypeRestrictionBaseContext relationDefTypeRestrictionBase() {
			return GetRuleContext<RelationDefTypeRestrictionBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(OpenFGAParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(OpenFGAParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHITESPACE() { return GetTokens(OpenFGAParser.WHITESPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE(int i) {
			return GetToken(OpenFGAParser.WHITESPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_WITH() { return GetToken(OpenFGAParser.KEYWORD_WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionNameContext conditionName() {
			return GetRuleContext<ConditionNameContext>(0);
		}
		public RelationDefTypeRestrictionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationDefTypeRestriction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.EnterRelationDefTypeRestriction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.ExitRelationDefTypeRestriction(this);
		}
	}

	[RuleVersion(0)]
	public RelationDefTypeRestrictionContext relationDefTypeRestriction() {
		RelationDefTypeRestrictionContext _localctx = new RelationDefTypeRestrictionContext(Context, State);
		EnterRule(_localctx, 30, RULE_relationDefTypeRestriction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 263;
				Match(NEWLINE);
				}
			}

			State = 273;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 266;
				relationDefTypeRestrictionBase();
				}
				break;
			case 2:
				{
				{
				State = 267;
				relationDefTypeRestrictionBase();
				State = 268;
				Match(WHITESPACE);
				State = 269;
				Match(KEYWORD_WITH);
				State = 270;
				Match(WHITESPACE);
				State = 271;
				conditionName();
				}
				}
				break;
			}
			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 275;
				Match(NEWLINE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationDefTypeRestrictionBaseContext : ParserRuleContext {
		public Extended_identifierContext relationDefTypeRestrictionType;
		public IToken relationDefTypeRestrictionWildcard;
		public Extended_identifierContext relationDefTypeRestrictionRelation;
		[System.Diagnostics.DebuggerNonUserCode] public Extended_identifierContext[] extended_identifier() {
			return GetRuleContexts<Extended_identifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Extended_identifierContext extended_identifier(int i) {
			return GetRuleContext<Extended_identifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(OpenFGAParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(OpenFGAParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(OpenFGAParser.STAR, 0); }
		public RelationDefTypeRestrictionBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationDefTypeRestrictionBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.EnterRelationDefTypeRestrictionBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.ExitRelationDefTypeRestrictionBase(this);
		}
	}

	[RuleVersion(0)]
	public RelationDefTypeRestrictionBaseContext relationDefTypeRestrictionBase() {
		RelationDefTypeRestrictionBaseContext _localctx = new RelationDefTypeRestrictionBaseContext(Context, State);
		EnterRule(_localctx, 32, RULE_relationDefTypeRestrictionBase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			_localctx.relationDefTypeRestrictionType = extended_identifier();
			State = 283;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				{
				State = 279;
				Match(COLON);
				State = 280;
				_localctx.relationDefTypeRestrictionWildcard = Match(STAR);
				}
				}
				break;
			case HASH:
				{
				{
				State = 281;
				Match(HASH);
				State = 282;
				_localctx.relationDefTypeRestrictionRelation = extended_identifier();
				}
				}
				break;
			case COMMA:
			case WHITESPACE:
			case RPRACKET:
			case NEWLINE:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		public ConditionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.EnterConditions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.ExitConditions(this);
		}
	}

	[RuleVersion(0)]
	public ConditionsContext conditions() {
		ConditionsContext _localctx = new ConditionsContext(Context, State);
		EnterRule(_localctx, 34, RULE_conditions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 285;
					condition();
					}
					} 
				}
				State = 290;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(OpenFGAParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(OpenFGAParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITION() { return GetToken(OpenFGAParser.CONDITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHITESPACE() { return GetTokens(OpenFGAParser.WHITESPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE(int i) {
			return GetToken(OpenFGAParser.WHITESPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionNameContext conditionName() {
			return GetRuleContext<ConditionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(OpenFGAParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionParameterContext[] conditionParameter() {
			return GetRuleContexts<ConditionParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionParameterContext conditionParameter(int i) {
			return GetRuleContext<ConditionParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(OpenFGAParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(OpenFGAParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionExpressionContext conditionExpression() {
			return GetRuleContext<ConditionExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(OpenFGAParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MultiLineCommentContext multiLineComment() {
			return GetRuleContext<MultiLineCommentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(OpenFGAParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(OpenFGAParser.COMMA, i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 36, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 291;
				Match(NEWLINE);
				State = 292;
				multiLineComment();
				}
				break;
			}
			State = 295;
			Match(NEWLINE);
			State = 296;
			Match(CONDITION);
			State = 297;
			Match(WHITESPACE);
			State = 298;
			conditionName();
			State = 300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHITESPACE) {
				{
				State = 299;
				Match(WHITESPACE);
				}
			}

			State = 302;
			Match(LPAREN);
			State = 304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHITESPACE) {
				{
				State = 303;
				Match(WHITESPACE);
				}
			}

			State = 306;
			conditionParameter();
			State = 308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHITESPACE) {
				{
				State = 307;
				Match(WHITESPACE);
				}
			}

			State = 320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 310;
				Match(COMMA);
				State = 312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHITESPACE) {
					{
					State = 311;
					Match(WHITESPACE);
					}
				}

				State = 314;
				conditionParameter();
				State = 316;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHITESPACE) {
					{
					State = 315;
					Match(WHITESPACE);
					}
				}

				}
				}
				State = 322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 323;
				Match(NEWLINE);
				}
			}

			State = 326;
			Match(RPAREN);
			State = 328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHITESPACE) {
				{
				State = 327;
				Match(WHITESPACE);
				}
			}

			State = 330;
			Match(LBRACE);
			State = 332;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 331;
				Match(NEWLINE);
				}
				break;
			}
			State = 335;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 334;
				Match(WHITESPACE);
				}
				break;
			}
			State = 337;
			conditionExpression();
			State = 339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 338;
				Match(NEWLINE);
				}
			}

			State = 341;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(OpenFGAParser.IDENTIFIER, 0); }
		public ConditionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.EnterConditionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.ExitConditionName(this);
		}
	}

	[RuleVersion(0)]
	public ConditionNameContext conditionName() {
		ConditionNameContext _localctx = new ConditionNameContext(Context, State);
		EnterRule(_localctx, 38, RULE_conditionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterNameContext parameterName() {
			return GetRuleContext<ParameterNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(OpenFGAParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterTypeContext parameterType() {
			return GetRuleContext<ParameterTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(OpenFGAParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHITESPACE() { return GetTokens(OpenFGAParser.WHITESPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE(int i) {
			return GetToken(OpenFGAParser.WHITESPACE, i);
		}
		public ConditionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.EnterConditionParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.ExitConditionParameter(this);
		}
	}

	[RuleVersion(0)]
	public ConditionParameterContext conditionParameter() {
		ConditionParameterContext _localctx = new ConditionParameterContext(Context, State);
		EnterRule(_localctx, 40, RULE_conditionParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 345;
				Match(NEWLINE);
				}
			}

			State = 348;
			parameterName();
			State = 350;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHITESPACE) {
				{
				State = 349;
				Match(WHITESPACE);
				}
			}

			State = 352;
			Match(COLON);
			State = 354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHITESPACE) {
				{
				State = 353;
				Match(WHITESPACE);
				}
			}

			State = 356;
			parameterType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(OpenFGAParser.IDENTIFIER, 0); }
		public ParameterNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.EnterParameterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.ExitParameterName(this);
		}
	}

	[RuleVersion(0)]
	public ParameterNameContext parameterName() {
		ParameterNameContext _localctx = new ParameterNameContext(Context, State);
		EnterRule(_localctx, 42, RULE_parameterName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITION_PARAM_TYPE() { return GetToken(OpenFGAParser.CONDITION_PARAM_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITION_PARAM_CONTAINER() { return GetToken(OpenFGAParser.CONDITION_PARAM_CONTAINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(OpenFGAParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(OpenFGAParser.GREATER, 0); }
		public ParameterTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.EnterParameterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.ExitParameterType(this);
		}
	}

	[RuleVersion(0)]
	public ParameterTypeContext parameterType() {
		ParameterTypeContext _localctx = new ParameterTypeContext(Context, State);
		EnterRule(_localctx, 44, RULE_parameterType);
		try {
			State = 365;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONDITION_PARAM_TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 360;
				Match(CONDITION_PARAM_TYPE);
				}
				break;
			case CONDITION_PARAM_CONTAINER:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 361;
				Match(CONDITION_PARAM_CONTAINER);
				State = 362;
				Match(LESS);
				State = 363;
				Match(CONDITION_PARAM_TYPE);
				State = 364;
				Match(GREATER);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiLineCommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(OpenFGAParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(OpenFGAParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(OpenFGAParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiLineCommentContext multiLineComment() {
			return GetRuleContext<MultiLineCommentContext>(0);
		}
		public MultiLineCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiLineComment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.EnterMultiLineComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.ExitMultiLineComment(this);
		}
	}

	[RuleVersion(0)]
	public MultiLineCommentContext multiLineComment() {
		MultiLineCommentContext _localctx = new MultiLineCommentContext(Context, State);
		EnterRule(_localctx, 46, RULE_multiLineComment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			Match(HASH);
			State = 371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 252201579132747774L) != 0)) {
				{
				{
				State = 368;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 373;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 376;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				State = 374;
				Match(NEWLINE);
				State = 375;
				multiLineComment();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODEL() { return GetToken(OpenFGAParser.MODEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(OpenFGAParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(OpenFGAParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATION() { return GetToken(OpenFGAParser.RELATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(OpenFGAParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(OpenFGAParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTEND() { return GetToken(OpenFGAParser.EXTEND, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 48, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 20382720L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extended_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED_IDENTIFIER() { return GetToken(OpenFGAParser.EXTENDED_IDENTIFIER, 0); }
		public Extended_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extended_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.EnterExtended_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.ExitExtended_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Extended_identifierContext extended_identifier() {
		Extended_identifierContext _localctx = new Extended_identifierContext(Context, State);
		EnterRule(_localctx, 50, RULE_extended_identifier);
		try {
			State = 382;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
			case MODULE:
			case MODEL:
			case SCHEMA:
			case EXTEND:
			case TYPE:
			case RELATION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 380;
				identifier();
				}
				break;
			case EXTENDED_IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 381;
				Match(EXTENDED_IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(OpenFGAParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(OpenFGAParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUALS() { return GetTokens(OpenFGAParser.EQUALS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS(int i) {
			return GetToken(OpenFGAParser.EQUALS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOT_EQUALS() { return GetTokens(OpenFGAParser.NOT_EQUALS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS(int i) {
			return GetToken(OpenFGAParser.NOT_EQUALS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IN() { return GetTokens(OpenFGAParser.IN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN(int i) {
			return GetToken(OpenFGAParser.IN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LESS() { return GetTokens(OpenFGAParser.LESS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS(int i) {
			return GetToken(OpenFGAParser.LESS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LESS_EQUALS() { return GetTokens(OpenFGAParser.LESS_EQUALS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUALS(int i) {
			return GetToken(OpenFGAParser.LESS_EQUALS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATER_EQUALS() { return GetTokens(OpenFGAParser.GREATER_EQUALS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUALS(int i) {
			return GetToken(OpenFGAParser.GREATER_EQUALS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATER() { return GetTokens(OpenFGAParser.GREATER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER(int i) {
			return GetToken(OpenFGAParser.GREATER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOGICAL_AND() { return GetTokens(OpenFGAParser.LOGICAL_AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_AND(int i) {
			return GetToken(OpenFGAParser.LOGICAL_AND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOGICAL_OR() { return GetTokens(OpenFGAParser.LOGICAL_OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_OR(int i) {
			return GetToken(OpenFGAParser.LOGICAL_OR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACKET() { return GetTokens(OpenFGAParser.LBRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET(int i) {
			return GetToken(OpenFGAParser.LBRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPRACKET() { return GetTokens(OpenFGAParser.RPRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPRACKET(int i) {
			return GetToken(OpenFGAParser.RPRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACE() { return GetTokens(OpenFGAParser.LBRACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE(int i) {
			return GetToken(OpenFGAParser.LBRACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(OpenFGAParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(OpenFGAParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(OpenFGAParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(OpenFGAParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(OpenFGAParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(OpenFGAParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(OpenFGAParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(OpenFGAParser.MINUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXCLAM() { return GetTokens(OpenFGAParser.EXCLAM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAM(int i) {
			return GetToken(OpenFGAParser.EXCLAM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUESTIONMARK() { return GetTokens(OpenFGAParser.QUESTIONMARK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTIONMARK(int i) {
			return GetToken(OpenFGAParser.QUESTIONMARK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(OpenFGAParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(OpenFGAParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(OpenFGAParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(OpenFGAParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SLASH() { return GetTokens(OpenFGAParser.SLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH(int i) {
			return GetToken(OpenFGAParser.SLASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PERCENT() { return GetTokens(OpenFGAParser.PERCENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT(int i) {
			return GetToken(OpenFGAParser.PERCENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CEL_TRUE() { return GetTokens(OpenFGAParser.CEL_TRUE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CEL_TRUE(int i) {
			return GetToken(OpenFGAParser.CEL_TRUE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CEL_FALSE() { return GetTokens(OpenFGAParser.CEL_FALSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CEL_FALSE(int i) {
			return GetToken(OpenFGAParser.CEL_FALSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUL() { return GetTokens(OpenFGAParser.NUL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUL(int i) {
			return GetToken(OpenFGAParser.NUL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHITESPACE() { return GetTokens(OpenFGAParser.WHITESPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE(int i) {
			return GetToken(OpenFGAParser.WHITESPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CEL_COMMENT() { return GetTokens(OpenFGAParser.CEL_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CEL_COMMENT(int i) {
			return GetToken(OpenFGAParser.CEL_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUM_FLOAT() { return GetTokens(OpenFGAParser.NUM_FLOAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM_FLOAT(int i) {
			return GetToken(OpenFGAParser.NUM_FLOAT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUM_INT() { return GetTokens(OpenFGAParser.NUM_INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM_INT(int i) {
			return GetToken(OpenFGAParser.NUM_INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUM_UINT() { return GetTokens(OpenFGAParser.NUM_UINT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM_UINT(int i) {
			return GetToken(OpenFGAParser.NUM_UINT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(OpenFGAParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(OpenFGAParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BYTES() { return GetTokens(OpenFGAParser.BYTES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTES(int i) {
			return GetToken(OpenFGAParser.BYTES, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(OpenFGAParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(OpenFGAParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACE() { return GetTokens(OpenFGAParser.RBRACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE(int i) {
			return GetToken(OpenFGAParser.RBRACE, i);
		}
		public ConditionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.EnterConditionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOpenFGAParserListener typedListener = listener as IOpenFGAParserListener;
			if (typedListener != null) typedListener.ExitConditionExpression(this);
		}
	}

	[RuleVersion(0)]
	public ConditionExpressionContext conditionExpression() {
		ConditionExpressionContext _localctx = new ConditionExpressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_conditionExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 388;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 386;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
					case 1:
						{
						State = 384;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 54043126674753464L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 2:
						{
						State = 385;
						_la = TokenStream.LA(1);
						if ( _la <= 0 || (_la==RBRACE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					} 
				}
				State = 390;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,57,392,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,1,0,3,0,56,8,0,1,0,3,
		0,59,8,0,1,0,1,0,3,0,63,8,0,1,0,3,0,66,8,0,1,0,1,0,3,0,70,8,0,1,0,1,0,
		3,0,74,8,0,1,0,1,0,1,1,1,1,1,1,3,1,81,8,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,
		89,8,1,1,2,1,2,1,2,3,2,94,8,2,1,2,1,2,1,2,1,2,3,2,100,8,2,1,3,5,3,103,
		8,3,10,3,12,3,106,9,3,1,4,1,4,3,4,110,8,4,1,4,1,4,1,4,3,4,115,8,4,1,4,
		1,4,1,4,1,4,1,4,1,4,4,4,123,8,4,11,4,12,4,124,3,4,127,8,4,1,5,1,5,3,5,
		131,8,5,1,5,1,5,1,5,1,5,1,5,3,5,138,8,5,1,5,1,5,3,5,142,8,5,1,5,1,5,1,
		6,1,6,1,7,1,7,1,7,3,7,151,8,7,1,7,3,7,154,8,7,1,8,1,8,3,8,158,8,8,1,8,
		3,8,161,8,8,1,9,1,9,1,9,1,9,1,9,3,9,168,8,9,4,9,170,8,9,11,9,12,9,171,
		1,9,1,9,1,9,1,9,1,9,3,9,179,8,9,4,9,181,8,9,11,9,12,9,182,1,9,1,9,1,9,
		1,9,1,9,3,9,190,8,9,3,9,192,8,9,1,10,1,10,1,11,1,11,5,11,198,8,11,10,11,
		12,11,201,9,11,1,11,1,11,3,11,205,8,11,1,11,5,11,208,8,11,10,11,12,11,
		211,9,11,1,11,1,11,1,12,1,12,5,12,217,8,12,10,12,12,12,220,9,12,1,12,1,
		12,3,12,224,8,12,1,12,5,12,227,8,12,10,12,12,12,230,9,12,1,12,1,12,1,13,
		1,13,3,13,236,8,13,1,13,1,13,3,13,240,8,13,1,13,1,13,3,13,244,8,13,1,13,
		1,13,3,13,248,8,13,5,13,250,8,13,10,13,12,13,253,9,13,1,13,1,13,1,14,1,
		14,1,14,1,14,1,14,3,14,262,8,14,1,15,3,15,265,8,15,1,15,1,15,1,15,1,15,
		1,15,1,15,1,15,3,15,274,8,15,1,15,3,15,277,8,15,1,16,1,16,1,16,1,16,1,
		16,3,16,284,8,16,1,17,5,17,287,8,17,10,17,12,17,290,9,17,1,18,1,18,3,18,
		294,8,18,1,18,1,18,1,18,1,18,1,18,3,18,301,8,18,1,18,1,18,3,18,305,8,18,
		1,18,1,18,3,18,309,8,18,1,18,1,18,3,18,313,8,18,1,18,1,18,3,18,317,8,18,
		5,18,319,8,18,10,18,12,18,322,9,18,1,18,3,18,325,8,18,1,18,1,18,3,18,329,
		8,18,1,18,1,18,3,18,333,8,18,1,18,3,18,336,8,18,1,18,1,18,3,18,340,8,18,
		1,18,1,18,1,19,1,19,1,20,3,20,347,8,20,1,20,1,20,3,20,351,8,20,1,20,1,
		20,3,20,355,8,20,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,3,22,366,
		8,22,1,23,1,23,5,23,370,8,23,10,23,12,23,373,9,23,1,23,1,23,3,23,377,8,
		23,1,24,1,24,1,25,1,25,3,25,383,8,25,1,26,1,26,5,26,387,8,26,10,26,12,
		26,390,9,26,1,26,0,0,27,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
		34,36,38,40,42,44,46,48,50,52,0,4,1,0,55,55,4,0,10,10,16,18,20,21,24,24,
		5,0,3,5,7,10,27,35,37,53,55,55,1,0,36,36,433,0,55,1,0,0,0,2,80,1,0,0,0,
		4,93,1,0,0,0,6,104,1,0,0,0,8,109,1,0,0,0,10,130,1,0,0,0,12,145,1,0,0,0,
		14,150,1,0,0,0,16,157,1,0,0,0,18,191,1,0,0,0,20,193,1,0,0,0,22,195,1,0,
		0,0,24,214,1,0,0,0,26,233,1,0,0,0,28,256,1,0,0,0,30,264,1,0,0,0,32,278,
		1,0,0,0,34,288,1,0,0,0,36,293,1,0,0,0,38,343,1,0,0,0,40,346,1,0,0,0,42,
		358,1,0,0,0,44,365,1,0,0,0,46,367,1,0,0,0,48,378,1,0,0,0,50,382,1,0,0,
		0,52,388,1,0,0,0,54,56,5,9,0,0,55,54,1,0,0,0,55,56,1,0,0,0,56,58,1,0,0,
		0,57,59,5,55,0,0,58,57,1,0,0,0,58,59,1,0,0,0,59,62,1,0,0,0,60,63,3,2,1,
		0,61,63,3,4,2,0,62,60,1,0,0,0,62,61,1,0,0,0,63,65,1,0,0,0,64,66,5,55,0,
		0,65,64,1,0,0,0,65,66,1,0,0,0,66,67,1,0,0,0,67,69,3,6,3,0,68,70,5,55,0,
		0,69,68,1,0,0,0,69,70,1,0,0,0,70,71,1,0,0,0,71,73,3,34,17,0,72,74,5,55,
		0,0,73,72,1,0,0,0,73,74,1,0,0,0,74,75,1,0,0,0,75,76,5,0,0,1,76,1,1,0,0,
		0,77,78,3,46,23,0,78,79,5,55,0,0,79,81,1,0,0,0,80,77,1,0,0,0,80,81,1,0,
		0,0,81,82,1,0,0,0,82,83,5,17,0,0,83,84,5,55,0,0,84,85,5,18,0,0,85,86,5,
		9,0,0,86,88,5,19,0,0,87,89,5,9,0,0,88,87,1,0,0,0,88,89,1,0,0,0,89,3,1,
		0,0,0,90,91,3,46,23,0,91,92,5,55,0,0,92,94,1,0,0,0,93,90,1,0,0,0,93,94,
		1,0,0,0,94,95,1,0,0,0,95,96,5,16,0,0,96,97,5,9,0,0,97,99,3,48,24,0,98,
		100,5,9,0,0,99,98,1,0,0,0,99,100,1,0,0,0,100,5,1,0,0,0,101,103,3,8,4,0,
		102,101,1,0,0,0,103,106,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,7,
		1,0,0,0,106,104,1,0,0,0,107,108,5,55,0,0,108,110,3,46,23,0,109,107,1,0,
		0,0,109,110,1,0,0,0,110,111,1,0,0,0,111,114,5,55,0,0,112,113,5,20,0,0,
		113,115,5,9,0,0,114,112,1,0,0,0,114,115,1,0,0,0,115,116,1,0,0,0,116,117,
		5,21,0,0,117,118,5,9,0,0,118,126,3,50,25,0,119,120,5,55,0,0,120,122,5,
		23,0,0,121,123,3,10,5,0,122,121,1,0,0,0,123,124,1,0,0,0,124,122,1,0,0,
		0,124,125,1,0,0,0,125,127,1,0,0,0,126,119,1,0,0,0,126,127,1,0,0,0,127,
		9,1,0,0,0,128,129,5,55,0,0,129,131,3,46,23,0,130,128,1,0,0,0,130,131,1,
		0,0,0,131,132,1,0,0,0,132,133,5,55,0,0,133,134,5,25,0,0,134,135,5,9,0,
		0,135,137,3,12,6,0,136,138,5,9,0,0,137,136,1,0,0,0,137,138,1,0,0,0,138,
		139,1,0,0,0,139,141,5,1,0,0,140,142,5,9,0,0,141,140,1,0,0,0,141,142,1,
		0,0,0,142,143,1,0,0,0,143,144,3,14,7,0,144,11,1,0,0,0,145,146,3,50,25,
		0,146,13,1,0,0,0,147,151,3,26,13,0,148,151,3,20,10,0,149,151,3,22,11,0,
		150,147,1,0,0,0,150,148,1,0,0,0,150,149,1,0,0,0,151,153,1,0,0,0,152,154,
		3,18,9,0,153,152,1,0,0,0,153,154,1,0,0,0,154,15,1,0,0,0,155,158,3,20,10,
		0,156,158,3,24,12,0,157,155,1,0,0,0,157,156,1,0,0,0,158,160,1,0,0,0,159,
		161,3,18,9,0,160,159,1,0,0,0,160,161,1,0,0,0,161,17,1,0,0,0,162,163,5,
		9,0,0,163,164,5,13,0,0,164,167,5,9,0,0,165,168,3,20,10,0,166,168,3,24,
		12,0,167,165,1,0,0,0,167,166,1,0,0,0,168,170,1,0,0,0,169,162,1,0,0,0,170,
		171,1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,192,1,0,0,0,173,174,5,
		9,0,0,174,175,5,12,0,0,175,178,5,9,0,0,176,179,3,20,10,0,177,179,3,24,
		12,0,178,176,1,0,0,0,178,177,1,0,0,0,179,181,1,0,0,0,180,173,1,0,0,0,181,
		182,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,192,1,0,0,0,184,185,5,
		9,0,0,185,186,5,14,0,0,186,189,5,9,0,0,187,190,3,20,10,0,188,190,3,24,
		12,0,189,187,1,0,0,0,189,188,1,0,0,0,190,192,1,0,0,0,191,169,1,0,0,0,191,
		180,1,0,0,0,191,184,1,0,0,0,192,19,1,0,0,0,193,194,3,28,14,0,194,21,1,
		0,0,0,195,199,5,7,0,0,196,198,5,9,0,0,197,196,1,0,0,0,198,201,1,0,0,0,
		199,197,1,0,0,0,199,200,1,0,0,0,200,204,1,0,0,0,201,199,1,0,0,0,202,205,
		3,14,7,0,203,205,3,24,12,0,204,202,1,0,0,0,204,203,1,0,0,0,205,209,1,0,
		0,0,206,208,5,9,0,0,207,206,1,0,0,0,208,211,1,0,0,0,209,207,1,0,0,0,209,
		210,1,0,0,0,210,212,1,0,0,0,211,209,1,0,0,0,212,213,5,8,0,0,213,23,1,0,
		0,0,214,218,5,7,0,0,215,217,5,9,0,0,216,215,1,0,0,0,217,220,1,0,0,0,218,
		216,1,0,0,0,218,219,1,0,0,0,219,223,1,0,0,0,220,218,1,0,0,0,221,224,3,
		16,8,0,222,224,3,24,12,0,223,221,1,0,0,0,223,222,1,0,0,0,224,228,1,0,0,
		0,225,227,5,9,0,0,226,225,1,0,0,0,227,230,1,0,0,0,228,226,1,0,0,0,228,
		229,1,0,0,0,229,231,1,0,0,0,230,228,1,0,0,0,231,232,5,8,0,0,232,25,1,0,
		0,0,233,235,5,5,0,0,234,236,5,9,0,0,235,234,1,0,0,0,235,236,1,0,0,0,236,
		237,1,0,0,0,237,239,3,30,15,0,238,240,5,9,0,0,239,238,1,0,0,0,239,240,
		1,0,0,0,240,251,1,0,0,0,241,243,5,2,0,0,242,244,5,9,0,0,243,242,1,0,0,
		0,243,244,1,0,0,0,244,245,1,0,0,0,245,247,3,30,15,0,246,248,5,9,0,0,247,
		246,1,0,0,0,247,248,1,0,0,0,248,250,1,0,0,0,249,241,1,0,0,0,250,253,1,
		0,0,0,251,249,1,0,0,0,251,252,1,0,0,0,252,254,1,0,0,0,253,251,1,0,0,0,
		254,255,5,34,0,0,255,27,1,0,0,0,256,261,3,50,25,0,257,258,5,9,0,0,258,
		259,5,15,0,0,259,260,5,9,0,0,260,262,3,50,25,0,261,257,1,0,0,0,261,262,
		1,0,0,0,262,29,1,0,0,0,263,265,5,55,0,0,264,263,1,0,0,0,264,265,1,0,0,
		0,265,273,1,0,0,0,266,274,3,32,16,0,267,268,3,32,16,0,268,269,5,9,0,0,
		269,270,5,26,0,0,270,271,5,9,0,0,271,272,3,38,19,0,272,274,1,0,0,0,273,
		266,1,0,0,0,273,267,1,0,0,0,274,276,1,0,0,0,275,277,5,55,0,0,276,275,1,
		0,0,0,276,277,1,0,0,0,277,31,1,0,0,0,278,283,3,50,25,0,279,280,5,1,0,0,
		280,284,5,42,0,0,281,282,5,11,0,0,282,284,3,50,25,0,283,279,1,0,0,0,283,
		281,1,0,0,0,283,284,1,0,0,0,284,33,1,0,0,0,285,287,3,36,18,0,286,285,1,
		0,0,0,287,290,1,0,0,0,288,286,1,0,0,0,288,289,1,0,0,0,289,35,1,0,0,0,290,
		288,1,0,0,0,291,292,5,55,0,0,292,294,3,46,23,0,293,291,1,0,0,0,293,294,
		1,0,0,0,294,295,1,0,0,0,295,296,5,55,0,0,296,297,5,22,0,0,297,298,5,9,
		0,0,298,300,3,38,19,0,299,301,5,9,0,0,300,299,1,0,0,0,300,301,1,0,0,0,
		301,302,1,0,0,0,302,304,5,7,0,0,303,305,5,9,0,0,304,303,1,0,0,0,304,305,
		1,0,0,0,305,306,1,0,0,0,306,308,3,40,20,0,307,309,5,9,0,0,308,307,1,0,
		0,0,308,309,1,0,0,0,309,320,1,0,0,0,310,312,5,2,0,0,311,313,5,9,0,0,312,
		311,1,0,0,0,312,313,1,0,0,0,313,314,1,0,0,0,314,316,3,40,20,0,315,317,
		5,9,0,0,316,315,1,0,0,0,316,317,1,0,0,0,317,319,1,0,0,0,318,310,1,0,0,
		0,319,322,1,0,0,0,320,318,1,0,0,0,320,321,1,0,0,0,321,324,1,0,0,0,322,
		320,1,0,0,0,323,325,5,55,0,0,324,323,1,0,0,0,324,325,1,0,0,0,325,326,1,
		0,0,0,326,328,5,8,0,0,327,329,5,9,0,0,328,327,1,0,0,0,328,329,1,0,0,0,
		329,330,1,0,0,0,330,332,5,35,0,0,331,333,5,55,0,0,332,331,1,0,0,0,332,
		333,1,0,0,0,333,335,1,0,0,0,334,336,5,9,0,0,335,334,1,0,0,0,335,336,1,
		0,0,0,336,337,1,0,0,0,337,339,3,52,26,0,338,340,5,55,0,0,339,338,1,0,0,
		0,339,340,1,0,0,0,340,341,1,0,0,0,341,342,5,36,0,0,342,37,1,0,0,0,343,
		344,5,10,0,0,344,39,1,0,0,0,345,347,5,55,0,0,346,345,1,0,0,0,346,347,1,
		0,0,0,347,348,1,0,0,0,348,350,3,42,21,0,349,351,5,9,0,0,350,349,1,0,0,
		0,350,351,1,0,0,0,351,352,1,0,0,0,352,354,5,1,0,0,353,355,5,9,0,0,354,
		353,1,0,0,0,354,355,1,0,0,0,355,356,1,0,0,0,356,357,3,44,22,0,357,41,1,
		0,0,0,358,359,5,10,0,0,359,43,1,0,0,0,360,366,5,57,0,0,361,362,5,56,0,
		0,362,363,5,3,0,0,363,364,5,57,0,0,364,366,5,4,0,0,365,360,1,0,0,0,365,
		361,1,0,0,0,366,45,1,0,0,0,367,371,5,11,0,0,368,370,8,0,0,0,369,368,1,
		0,0,0,370,373,1,0,0,0,371,369,1,0,0,0,371,372,1,0,0,0,372,376,1,0,0,0,
		373,371,1,0,0,0,374,375,5,55,0,0,375,377,3,46,23,0,376,374,1,0,0,0,376,
		377,1,0,0,0,377,47,1,0,0,0,378,379,7,1,0,0,379,49,1,0,0,0,380,383,3,48,
		24,0,381,383,5,54,0,0,382,380,1,0,0,0,382,381,1,0,0,0,383,51,1,0,0,0,384,
		387,7,2,0,0,385,387,8,3,0,0,386,384,1,0,0,0,386,385,1,0,0,0,387,390,1,
		0,0,0,388,386,1,0,0,0,388,389,1,0,0,0,389,53,1,0,0,0,390,388,1,0,0,0,66,
		55,58,62,65,69,73,80,88,93,99,104,109,114,124,126,130,137,141,150,153,
		157,160,167,171,178,182,189,191,199,204,209,218,223,228,235,239,243,247,
		251,261,264,273,276,283,288,293,300,304,308,312,316,320,324,328,332,335,
		339,346,350,354,365,371,376,382,386,388
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
